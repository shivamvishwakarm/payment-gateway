generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// MERCHANT DOMAIN
// =============================================================================

model Merchant {
  id            BigInt @id @default(autoincrement())
  uuid          String @unique @default(uuid()) // For external APIs
  name          String @db.VarChar(255)
  email         String @unique @db.VarChar(255)
  phone         String @unique @db.VarChar(20)
  password_hash String @db.VarChar(255)

  // Business information
  business_type     String? @db.VarChar(100)
  business_category String? @db.VarChar(100)
  country_code      String  @default("IN") @db.VarChar(3)
  timezone          String  @default("Asia/Kolkata") @db.VarChar(50)

  // Status and verification
  status             MerchantStatus @default(PENDING)
  verification_level Int            @default(1) // 1=basic, 2=verified, 3=premium
  live_mode          Boolean        @default(false)

  // Configuration (structured instead of JSON)
  settlement_account  String? @db.VarChar(100)
  settlement_schedule String? @default("daily") @db.VarChar(20) // daily, weekly, monthly
  fee_structure       Json? // Only for complex fee structures

  // Risk management
  daily_limit_cents   BigInt? @default(10000000) // $100,000 default
  monthly_limit_cents BigInt?
  risk_score          Int     @default(0) // 0-100

  // Relations
  api_keys           ApiKey[]
  payments           Payment[]
  webhooks           Webhook[]
  orders             Order[]
  refresh_tokens     RefreshToken[]
  merchant_analytics MerchantAnalytics[]

  // Audit fields
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  last_active_at DateTime?

  // Optimized indexes
  @@index([status])
  @@index([country_code])
  @@index([created_at])
  @@index([last_active_at])
  @@index([deleted_at])
  @@index([verification_level, status])
  @@map("merchants")
}

enum MerchantStatus {
  PENDING
  ACTIVE
  VERIFIED
  SUSPENDED
  BLOCKED
  DEACTIVATED
}

// =============================================================================
// API MANAGEMENT
// =============================================================================

model ApiKey {
  id          BigInt @id @default(autoincrement())
  uuid        String @unique @default(uuid())
  merchant_id BigInt
  name        String @db.VarChar(100)
  key_hash    String @db.VarChar(255)
  key_prefix  String @db.VarChar(20) // For easy identification

  // Permissions and limits
  permissions String[] // ["read_payments", "create_payments", "webhooks"]
  rate_limit  Int      @default(1000) // requests per hour
  live_mode   Boolean  @default(false)

  // Security
  last_used_at DateTime?
  ip_whitelist String[] // Optional IP restrictions

  // Relations
  merchant Merchant @relation(fields: [merchant_id], references: [id], onDelete: Cascade)

  // Audit
  created_at DateTime  @default(now())
  expires_at DateTime? // Optional expiry
  revoked_at DateTime?

  @@index([merchant_id])
  @@index([key_prefix])
  @@index([last_used_at])
  @@index([revoked_at])
  @@map("api_keys")
}

// =============================================================================
// PAYMENT PROCESSING (Core table - heavily optimized)
// =============================================================================

model Payment {
  id   BigInt @id @default(autoincrement())
  uuid String @unique @default(uuid()) // For external APIs

  // Partitioning keys
  created_month String // "2025-01" for monthly partitioning
  merchant_id   BigInt

  // Core payment data
  amount_cents      BigInt // Using BigInt for large amounts
  currency          Currency
  exchange_rate     Decimal? @db.Decimal(12, 8) // Higher precision
  base_amount_cents BigInt? // Amount in merchant's base currency

  // Payment flow
  status         PaymentStatus @default(PENDING)
  payment_method PaymentMethod
  payment_flow   PaymentFlow   @default(STANDARD) // STANDARD, EXPRESS, RECURRING

  // Gateway integration
  gateway_provider  String  @db.VarChar(50) // "stripe", "razorpay", "adyen"
  gateway_id        String? @db.VarChar(100) // Gateway's transaction ID
  gateway_reference String? @db.VarChar(100) // Gateway's reference
  gateway_status    String? @db.VarChar(50) // Gateway's status
  gateway_response  Json? // Minimal gateway response
  gateway_fee_cents Int? // Gateway's fee

  // Customer and order
  customer_id BigInt?
  order_id    BigInt? // Direct relation, not through payment

  // Security and compliance
  client_secret   String  @unique @db.VarChar(100)
  idempotency_key String? @unique @db.VarChar(100)
  ip_address      String? @db.VarChar(45) // IPv6 support
  user_agent      String? @db.VarChar(500)

  // Business logic
  description        String? @db.VarChar(500)
  metadata_type      String? @db.VarChar(50) // "order", "subscription", "invoice"
  metadata_reference String? @db.VarChar(100) // Reference to business object
  metadata_extra     Json? // Only for additional data

  // Settlement
  settlement_status    SettlementStatus @default(PENDING)
  settlement_date      DateTime?
  settled_amount_cents BigInt?
  settlement_fee_cents Int?
  settlement_reference String?          @db.VarChar(100)

  // Failure handling
  failure_code   String? @db.VarChar(50)
  failure_reason String? @db.VarChar(500)
  retry_count    Int     @default(0)

  // Relations
  merchant       Merchant       @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  customer       Customer?      @relation(fields: [customer_id], references: [id])
  order          Order?         @relation(fields: [order_id], references: [id])
  refunds        Refund[]
  payment_events PaymentEvent[] // Event sourcing

  // Audit
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
  processed_at DateTime? // When payment was actually processed

  // High-performance indexes
  @@index([merchant_id, created_at])
  @@index([merchant_id, status])
  @@index([status, created_at])
  @@index([gateway_provider, gateway_id])
  @@index([customer_id])
  @@index([created_month]) // For partitioning
  @@index([settlement_status, settlement_date])
  @@index([idempotency_key])
  @@index([processed_at])
  @@index([deleted_at])
  // Composite indexes for analytics
  @@index([merchant_id, currency, created_at])
  @@index([merchant_id, payment_method, created_at])
  @@index([gateway_provider, status, created_at])
  @@map("payments")
}

// Payment event sourcing for audit trail
model PaymentEvent {
  id         BigInt  @id @default(autoincrement())
  payment_id BigInt
  event_type String  @db.VarChar(50) // "created", "authorized", "captured", "failed"
  event_data Json // Event-specific data
  version    Int     @default(1)
  caused_by  String? @db.VarChar(100) // system, gateway, user

  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@index([payment_id, version])
  @@index([event_type, created_at])
  @@map("payment_events")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  REQUIRES_ACTION // 3DS, SCA etc
  AUTHORIZED
  CAPTURED
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentFlow {
  STANDARD
  EXPRESS
  RECURRING
  MARKETPLACE
  ESCROW
}

enum SettlementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  ON_HOLD
}

enum PaymentMethod {
  CARD
  UPI
  WALLET
  NETBANKING
  BANK_TRANSFER
  PAYPAL
  GOOGLE_PAY
  APPLE_PAY
  BUY_NOW_PAY_LATER
  CRYPTOCURRENCY
}

// =============================================================================
// CUSTOMER MANAGEMENT
// =============================================================================

model Customer {
  id   BigInt @id @default(autoincrement())
  uuid String @unique @default(uuid())

  // Personal information (consider encryption for PII)
  email String  @db.VarChar(255)
  phone String? @db.VarChar(20)
  name  String? @db.VarChar(255)

  // Customer segmentation
  customer_type        String @default("individual") @db.VarChar(20) // individual, business
  risk_level           String @default("low") @db.VarChar(20) // low, medium, high
  lifetime_value_cents BigInt @default(0)

  // Relations
  orders   Order[]
  payments Payment[]

  // Audit
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  last_payment_at DateTime?

  @@index([email])
  @@index([phone])
  @@index([customer_type])
  @@index([created_at])
  @@index([last_payment_at])
  @@index([deleted_at])
  @@map("customers")
}

// =============================================================================
// ORDER MANAGEMENT
// =============================================================================

model Order {
  id          BigInt @id @default(autoincrement())
  uuid        String @unique @default(uuid())
  merchant_id BigInt
  customer_id BigInt

  // Order details
  order_number       String      @unique @db.VarChar(100) // Human-readable order number
  total_amount_cents BigInt
  currency           Currency
  status             OrderStatus @default(PENDING)

  // Business context
  order_type  String? @db.VarChar(50) // "product", "service", "subscription"
  description String? @db.VarChar(500)

  // Relations
  merchant      Merchant      @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  customer      Customer      @relation(fields: [customer_id], references: [id])
  payments      Payment[]
  payment_links PaymentLink[]

  // Audit
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  expires_at DateTime?

  @@index([merchant_id, created_at])
  @@index([customer_id])
  @@index([status])
  @@index([order_number])
  @@index([expires_at])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

// =============================================================================
// PAYMENT LINKS
// =============================================================================

model PaymentLink {
  id       BigInt @id @default(autoincrement())
  uuid     String @unique @default(uuid())
  order_id BigInt

  // Link details
  url_slug     String            @unique @db.VarChar(50) // Short URL slug
  amount_cents BigInt
  currency     Currency
  status       PaymentLinkStatus @default(ACTIVE)

  // Configuration
  expires_at   DateTime
  max_uses     Int?     @default(1)
  current_uses Int      @default(0)

  // Metadata
  title       String? @db.VarChar(200)
  description String? @db.VarChar(500)

  // Relations
  order Order @relation(fields: [order_id], references: [id])

  // Audit
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  last_accessed_at DateTime?

  @@index([url_slug])
  @@index([order_id])
  @@index([status, expires_at])
  @@index([created_at])
  @@map("payment_links")
}

enum PaymentLinkStatus {
  ACTIVE
  EXPIRED
  EXHAUSTED
  DISABLED
}

// =============================================================================
// REFUND MANAGEMENT
// =============================================================================

model Refund {
  id         BigInt @id @default(autoincrement())
  uuid       String @unique @default(uuid())
  payment_id BigInt

  // Refund details
  amount_cents BigInt
  currency     Currency
  status       RefundStatus @default(PENDING)
  refund_type  RefundType   @default(FULL)

  // Business logic
  reason_code  String? @db.VarChar(50) // "requested_by_customer", "duplicate", "fraud"
  reason_text  String? @db.VarChar(500)
  initiated_by String  @default("merchant") @db.VarChar(20) // merchant, gateway, dispute

  // Gateway integration
  gateway_refund_id String? @db.VarChar(100)
  gateway_status    String? @db.VarChar(50)
  gateway_response  Json?

  // Processing
  processed_at   DateTime?
  failure_reason String?   @db.VarChar(500)

  // Relations
  payment Payment @relation(fields: [payment_id], references: [id])

  // Audit
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([payment_id])
  @@index([status])
  @@index([created_at])
  @@index([processed_at])
  @@index([reason_code])
  @@map("refunds")
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum RefundType {
  FULL
  PARTIAL
}

// =============================================================================
// WEBHOOK SYSTEM (Optimized for high throughput)
// =============================================================================

model Webhook {
  id          BigInt @id @default(autoincrement())
  uuid        String @unique @default(uuid())
  merchant_id BigInt

  // Configuration
  name        String        @db.VarChar(100)
  url         String        @db.VarChar(1000)
  events      String[] // ["payment.completed", "refund.created"]
  secret_hash String        @db.VarChar(255) // Hashed webhook secret
  status      WebhookStatus @default(ACTIVE)

  // Rate limiting and retry
  rate_limit_per_minute Int    @default(60)
  max_retry_attempts    Int    @default(5)
  retry_backoff         String @default("exponential") @db.VarChar(20)
  timeout_seconds       Int    @default(30)

  // Health tracking
  success_rate         Decimal   @default(100.0) @db.Decimal(5, 2)
  last_success_at      DateTime?
  consecutive_failures Int       @default(0)

  // Relations
  merchant           Merchant          @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  webhook_deliveries WebhookDelivery[]

  // Audit
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_triggered_at DateTime?

  @@index([merchant_id])
  @@index([status])
  @@index([last_success_at])
  @@index([consecutive_failures])
  @@map("webhooks")
}

model WebhookDelivery {
  id         BigInt @id @default(autoincrement())
  webhook_id BigInt

  // Event details
  event_type   String @db.VarChar(50)
  event_id     String @db.VarChar(100) // Unique event identifier
  payload_hash String @db.VarChar(64) // SHA256 of payload
  payload      Json // Compressed payload

  // Delivery tracking
  status       DeliveryStatus @default(PENDING)
  attempts     Int            @default(0)
  max_attempts Int            @default(5)

  // HTTP details
  http_status      Int?
  response_time_ms Int?
  response_body    String? @db.Text
  error_message    String? @db.VarChar(1000)

  // Scheduling
  scheduled_at    DateTime  @default(now())
  next_attempt_at DateTime?
  delivered_at    DateTime?

  // Relations
  webhook Webhook @relation(fields: [webhook_id], references: [id], onDelete: Cascade)

  // Audit
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([webhook_id, created_at])
  @@index([status, scheduled_at])
  @@index([event_type, created_at])
  @@index([delivered_at])
  @@index([next_attempt_at])
  @@map("webhook_deliveries")
}

enum WebhookStatus {
  ACTIVE
  PAUSED
  DISABLED
  FAILED
}

enum DeliveryStatus {
  PENDING
  SENDING
  DELIVERED
  FAILED
  TIMEOUT
  RATE_LIMITED
  PERMANENTLY_FAILED
}

// =============================================================================
// ANALYTICS & REPORTING (Optimized read models)
// =============================================================================

model MerchantAnalytics {
  id          BigInt   @id @default(autoincrement())
  merchant_id BigInt
  date        DateTime // Daily aggregation
  currency    Currency

  // Payment metrics
  total_payments        Int    @default(0)
  successful_payments   Int    @default(0)
  failed_payments       Int    @default(0)
  total_amount_cents    BigInt @default(0)
  refunded_amount_cents BigInt @default(0)

  // Performance metrics
  success_rate        Decimal @db.Decimal(5, 2)
  avg_payment_time_ms Int?

  // Relations
  merchant Merchant @relation(fields: [merchant_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("merchant_analytics")
}

// =============================================================================
// AUTHENTICATION & SECURITY
// =============================================================================

model RefreshToken {
  id          BigInt @id @default(autoincrement())
  uuid        String @unique @default(uuid())
  merchant_id BigInt

  // Token details
  token_hash String  @unique @db.VarChar(255)
  device_id  String? @db.VarChar(100)
  ip_address String? @db.VarChar(45)
  user_agent String? @db.VarChar(500)

  // Lifecycle
  expires_at DateTime
  used_at    DateTime?
  revoked_at DateTime?

  // Relations
  merchant Merchant @relation(fields: [merchant_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@index([merchant_id])
  @@index([expires_at])
  @@index([revoked_at])
  @@index([used_at])
  @@map("refresh_tokens")
}

// =============================================================================
// ENUMS & TYPES
// =============================================================================

enum Currency {
  // Major currencies
  USD
  EUR
  GBP
  JPY

  // Regional currencies
  INR
  CNY
  CAD
  AUD
  CHF
  HKD
  SGD
  NZD
  SEK
  NOK
  DKK

  // Crypto (if supported)
  BTC
  ETH
  USDC
  USDT
}
