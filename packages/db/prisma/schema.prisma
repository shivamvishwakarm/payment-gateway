// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// merchant
model Merchant {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phone      String
  password   String
  live_mode  Boolean   @default(false)
  api_key    ApiKey[]
  payments   Payment[]
  webhooks   Webhook[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Order      Order[]
}

// api key
model ApiKey {
  id         String   @id @default(uuid())
  name       String
  key_hash   String
  live_mode  Boolean
  merchantId String
  Merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// payment
model Payment {
  id            String        @id @default(uuid())
  merchantId    String
  // customerId    String
  orderId       String?
  currency      Currency
  clientSecret  String
  paymentId     String?
  paymentLink   String?
  paymentMethod PaymentMethod
  totalAmount   Int
  status        PaymentStatus @default(PENDING)
  failureReason String?
  metadata      Json?
  merchant      Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  // customer      Customer      @relation(fields: [customerId], references: [id])
  order         Order?        @relation(fields: [orderId], references: [id])
  refunds       Refund[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Customer      Customer?     @relation(fields: [customerId], references: [id])
  customerId    String?

  @@index([merchantId])
  // @@index([customerId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CARD
  UPI
  WALLET
  BANK_TRANSFER
  PAYPAL
  GOOGLE_PAY
  APPLE_PAY
}

model PaymentLink {
  id        String   @id @default(uuid())
  orderId   String
  url       String
  expiresAt DateTime
  status    String // pending, paid, expired, failed
  amount    Int
  currency  String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  order Order @relation(fields: [orderId], references: [id])
}

model Order {
  id          String        @id @default(uuid())
  merchantId  String
  customerId  String
  merchant    Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments    Payment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PaymentLink PaymentLink[]
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String
  phone     String
  orders    Order[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Refund {
  id         String   @id @default(uuid())
  payment_id String
  payment    Payment  @relation(fields: [payment_id], references: [id])
  amount     Int
  status     Status   @default(PENDING)
  reason     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Currency {
  INR
  USD
  EUR
  GBP
  CAD
  AUD
  NZD
  CHF
  HKD
  SGD

  // Todo: Add more currencies
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}

// webhooks

model Webhook {
  id                 String            @id @default(uuid())
  name               String
  url                String
  events             String[] // ["payment.success", "refund.initiated"]
  secret             String // Used to sign webhook payload for security
  status             WebhookStatus     @default(ACTIVE)
  merchant_id        String
  merchant           Merchant          @relation(fields: [merchant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webhook_deliveries WebhookDelivery[]
  failure_reason     String?
  failure_count      Int?              @default(0)
  last_delivered_at  DateTime?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
}

model WebhookDelivery {
  id               String         @id @default(uuid())
  webhook_id       String
  description      String?
  webhook          Webhook        @relation(fields: [webhook_id], references: [id], onDelete: Cascade)
  event_type       String // e.g. "payment.success"
  payload          Json // Actual data sent
  response_code    Int?
  response_body    String?
  response_headers Json?
  status           deliveryStatus @default(PENDING)
  attempts         Int            @default(0)
  next_attempt     DateTime?
  last_attempt     DateTime?
  created_at       DateTime       @default(now())

  @@index([status])
}

enum deliveryStatus {
  PENDING
  SUCCESS
  FAILED
  RETRY
  TIMEOUT
}

model refreshToken {
  id         String @id @default(uuid())
  token      String
  merchantId String
}
